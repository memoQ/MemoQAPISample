//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MQS.FileManager
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UnexpectedFault", Namespace="http://kilgray.com/memoqservices/2007")]
    public partial class UnexpectedFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string StackTraceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StackTrace
        {
            get
            {
                return this.StackTraceField;
            }
            set
            {
                this.StackTraceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GenericFault", Namespace="http://kilgray.com/memoqservices/2007")]
    public partial class GenericFault : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ErrorCodeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorCode
        {
            get
            {
                return this.ErrorCodeField;
            }
            set
            {
                this.ErrorCodeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://kilgray.com/memoqservices/2007", ConfigurationName="MQS.FileManager.IFileManagerService")]
    public interface IFileManagerService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileUpload", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileUploadR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.UnexpectedFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileUploadU" +
            "nexpectedFaultFault", Name="UnexpectedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.GenericFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileUploadG" +
            "enericFaultFault", Name="GenericFault")]
        System.Guid BeginChunkedFileUpload(string fileName, bool isZipped);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileUpload", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileUploadR" +
            "esponse")]
        System.Threading.Tasks.Task<System.Guid> BeginChunkedFileUploadAsync(string fileName, bool isZipped);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/AddNextFileChunk", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/AddNextFileChunkRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.UnexpectedFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/AddNextFileChunkUnexpec" +
            "tedFaultFault", Name="UnexpectedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.GenericFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/AddNextFileChunkGeneric" +
            "FaultFault", Name="GenericFault")]
        void AddNextFileChunk(System.Guid fileIdAndSessionId, byte[] fileData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/AddNextFileChunk", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/AddNextFileChunkRespons" +
            "e")]
        System.Threading.Tasks.Task AddNextFileChunkAsync(System.Guid fileIdAndSessionId, byte[] fileData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileUpload", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileUploadRes" +
            "ponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.UnexpectedFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileUploadUne" +
            "xpectedFaultFault", Name="UnexpectedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.GenericFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileUploadGen" +
            "ericFaultFault", Name="GenericFault")]
        void EndChunkedFileUpload(System.Guid fileIdAndSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileUpload", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileUploadRes" +
            "ponse")]
        System.Threading.Tasks.Task EndChunkedFileUploadAsync(System.Guid fileIdAndSessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileDownloa" +
            "d", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileDownloa" +
            "dResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.UnexpectedFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileDownloa" +
            "dUnexpectedFaultFault", Name="UnexpectedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.GenericFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileDownloa" +
            "dGenericFaultFault", Name="GenericFault")]
        MQS.FileManager.BeginChunkedFileDownloadResponse BeginChunkedFileDownload(MQS.FileManager.BeginChunkedFileDownloadRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileDownloa" +
            "d", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/BeginChunkedFileDownloa" +
            "dResponse")]
        System.Threading.Tasks.Task<MQS.FileManager.BeginChunkedFileDownloadResponse> BeginChunkedFileDownloadAsync(MQS.FileManager.BeginChunkedFileDownloadRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/GetNextFileChunk", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/GetNextFileChunkRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.UnexpectedFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/GetNextFileChunkUnexpec" +
            "tedFaultFault", Name="UnexpectedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.GenericFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/GetNextFileChunkGeneric" +
            "FaultFault", Name="GenericFault")]
        byte[] GetNextFileChunk(System.Guid sessionId, int byteCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/GetNextFileChunk", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/GetNextFileChunkRespons" +
            "e")]
        System.Threading.Tasks.Task<byte[]> GetNextFileChunkAsync(System.Guid sessionId, int byteCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileDownload", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileDownloadR" +
            "esponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.UnexpectedFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileDownloadU" +
            "nexpectedFaultFault", Name="UnexpectedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.GenericFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileDownloadG" +
            "enericFaultFault", Name="GenericFault")]
        void EndChunkedFileDownload(System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileDownload", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/EndChunkedFileDownloadR" +
            "esponse")]
        System.Threading.Tasks.Task EndChunkedFileDownloadAsync(System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/DeleteFile", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/DeleteFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.UnexpectedFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/DeleteFileUnexpectedFau" +
            "ltFault", Name="UnexpectedFault")]
        [System.ServiceModel.FaultContractAttribute(typeof(MQS.FileManager.GenericFault), Action="http://kilgray.com/memoqservices/2007/IFileManagerService/DeleteFileGenericFaultF" +
            "ault", Name="GenericFault")]
        void DeleteFile(System.Guid fileGuid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://kilgray.com/memoqservices/2007/IFileManagerService/DeleteFile", ReplyAction="http://kilgray.com/memoqservices/2007/IFileManagerService/DeleteFileResponse")]
        System.Threading.Tasks.Task DeleteFileAsync(System.Guid fileGuid);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="BeginChunkedFileDownload", WrapperNamespace="http://kilgray.com/memoqservices/2007", IsWrapped=true)]
    public partial class BeginChunkedFileDownloadRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://kilgray.com/memoqservices/2007", Order=0)]
        public System.Guid fileGuid;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://kilgray.com/memoqservices/2007", Order=1)]
        public bool zip;
        
        public BeginChunkedFileDownloadRequest()
        {
        }
        
        public BeginChunkedFileDownloadRequest(System.Guid fileGuid, bool zip)
        {
            this.fileGuid = fileGuid;
            this.zip = zip;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="BeginChunkedFileDownloadResponse", WrapperNamespace="http://kilgray.com/memoqservices/2007", IsWrapped=true)]
    public partial class BeginChunkedFileDownloadResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://kilgray.com/memoqservices/2007", Order=0)]
        public System.Guid BeginChunkedFileDownloadResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://kilgray.com/memoqservices/2007", Order=1)]
        public string fileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://kilgray.com/memoqservices/2007", Order=2)]
        public int fileSize;
        
        public BeginChunkedFileDownloadResponse()
        {
        }
        
        public BeginChunkedFileDownloadResponse(System.Guid BeginChunkedFileDownloadResult, string fileName, int fileSize)
        {
            this.BeginChunkedFileDownloadResult = BeginChunkedFileDownloadResult;
            this.fileName = fileName;
            this.fileSize = fileSize;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileManagerServiceChannel : MQS.FileManager.IFileManagerService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileManagerServiceClient : System.ServiceModel.ClientBase<MQS.FileManager.IFileManagerService>, MQS.FileManager.IFileManagerService
    {
        
        public FileManagerServiceClient()
        {
        }
        
        public FileManagerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName)
        {
        }
        
        public FileManagerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public FileManagerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress)
        {
        }
        
        public FileManagerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Guid BeginChunkedFileUpload(string fileName, bool isZipped)
        {
            return base.Channel.BeginChunkedFileUpload(fileName, isZipped);
        }
        
        public System.Threading.Tasks.Task<System.Guid> BeginChunkedFileUploadAsync(string fileName, bool isZipped)
        {
            return base.Channel.BeginChunkedFileUploadAsync(fileName, isZipped);
        }
        
        public void AddNextFileChunk(System.Guid fileIdAndSessionId, byte[] fileData)
        {
            base.Channel.AddNextFileChunk(fileIdAndSessionId, fileData);
        }
        
        public System.Threading.Tasks.Task AddNextFileChunkAsync(System.Guid fileIdAndSessionId, byte[] fileData)
        {
            return base.Channel.AddNextFileChunkAsync(fileIdAndSessionId, fileData);
        }
        
        public void EndChunkedFileUpload(System.Guid fileIdAndSessionId)
        {
            base.Channel.EndChunkedFileUpload(fileIdAndSessionId);
        }
        
        public System.Threading.Tasks.Task EndChunkedFileUploadAsync(System.Guid fileIdAndSessionId)
        {
            return base.Channel.EndChunkedFileUploadAsync(fileIdAndSessionId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MQS.FileManager.BeginChunkedFileDownloadResponse MQS.FileManager.IFileManagerService.BeginChunkedFileDownload(MQS.FileManager.BeginChunkedFileDownloadRequest request)
        {
            return base.Channel.BeginChunkedFileDownload(request);
        }
        
        public System.Guid BeginChunkedFileDownload(System.Guid fileGuid, bool zip, out string fileName, out int fileSize)
        {
            MQS.FileManager.BeginChunkedFileDownloadRequest inValue = new MQS.FileManager.BeginChunkedFileDownloadRequest();
            inValue.fileGuid = fileGuid;
            inValue.zip = zip;
            MQS.FileManager.BeginChunkedFileDownloadResponse retVal = ((MQS.FileManager.IFileManagerService)(this)).BeginChunkedFileDownload(inValue);
            fileName = retVal.fileName;
            fileSize = retVal.fileSize;
            return retVal.BeginChunkedFileDownloadResult;
        }
        
        public System.Threading.Tasks.Task<MQS.FileManager.BeginChunkedFileDownloadResponse> BeginChunkedFileDownloadAsync(MQS.FileManager.BeginChunkedFileDownloadRequest request)
        {
            return base.Channel.BeginChunkedFileDownloadAsync(request);
        }
        
        public byte[] GetNextFileChunk(System.Guid sessionId, int byteCount)
        {
            return base.Channel.GetNextFileChunk(sessionId, byteCount);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetNextFileChunkAsync(System.Guid sessionId, int byteCount)
        {
            return base.Channel.GetNextFileChunkAsync(sessionId, byteCount);
        }
        
        public void EndChunkedFileDownload(System.Guid sessionId)
        {
            base.Channel.EndChunkedFileDownload(sessionId);
        }
        
        public System.Threading.Tasks.Task EndChunkedFileDownloadAsync(System.Guid sessionId)
        {
            return base.Channel.EndChunkedFileDownloadAsync(sessionId);
        }
        
        public void DeleteFile(System.Guid fileGuid)
        {
            base.Channel.DeleteFile(fileGuid);
        }
        
        public System.Threading.Tasks.Task DeleteFileAsync(System.Guid fileGuid)
        {
            return base.Channel.DeleteFileAsync(fileGuid);
        }
    }
}
